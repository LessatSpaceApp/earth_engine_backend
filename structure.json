{
  ".env": "EE_PROJECT=ee-mauriccaceres",
  "main.py": "from fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\nimport folium\r\nfrom starlette.responses import FileResponse\r\nimport ee\r\nfrom dotenv import load_dotenv\r\nfrom typing import Optional\r\nimport os\r\n\r\n\r\n# Load environment variables from the .env file\r\nload_dotenv()\r\n\r\n# Retrieve the Earth Engine project name from the environment variables\r\nee_project = os.getenv('EE_PROJECT')\r\n\r\n# Initialize Earth Engine with the project name\r\nee.Initialize(project=ee_project)\r\n\r\n# FastAPI app\r\napp = FastAPI()\r\n\r\n# Define a model for the area of interest and date range\r\nclass AoiRequest(BaseModel):\r\n    lat: float\r\n    lon: float\r\n    start_date: Optional[str] = '2024-01-01'\r\n    end_date: Optional[str] = '2025-12-30'\r\n\r\n\r\n# Endpoint 0: Root\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"Welcome to LESSAT 2024!\"}\r\n\r\n\r\n# Endpoint 1: Generate scatter plot of Red vs NIR\r\n@app.post(\"/generate-scatter-plot/\")\r\nasync def generate_scatter_plot(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Define a function to sample Red and NIR bands from each image\r\n    def sample_image(image):\r\n        return image.select(['B4', 'B5']).sample(region=aoi, scale=30, numPixels=500)\r\n\r\n    # Map the sampling function over the collection\r\n    sampled_images = landsat_collection.map(sample_image)\r\n\r\n    # Flatten the sampled points into a single FeatureCollection\r\n    all_samples = sampled_images.flatten()\r\n\r\n    # Arrange the samples as a list of lists\r\n    samp_dict = all_samples.reduceColumns(ee.Reducer.toList().repeat(2), ['B4', 'B5'])\r\n    samp_list = ee.List(samp_dict.get('list'))\r\n\r\n    # Save server-side ee.List as a client-side Python list\r\n    samp_data = samp_list.getInfo()\r\n\r\n    # Generate the scatter plot using matplotlib\r\n    plt.scatter(samp_data[0], samp_data[1], alpha=0.2)\r\n    plt.xlabel('Red (B4)', fontsize=12)\r\n    plt.ylabel('NIR (B5)', fontsize=12)\r\n    plt.title('Red vs. NIR Scatter Plot for Landsat Images')\r\n\r\n    # Save the plot\r\n    plot_filename = 'scatter_plot.png'\r\n    plt.savefig(plot_filename)\r\n\r\n    # Return the image as a response\r\n    return FileResponse(plot_filename, media_type='image/png')\r\n\r\n@app.post(\"/generate-map/\")\r\nasync def generate_map(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Get the first image in the collection for visualization\r\n    img = landsat_collection.first()\r\n\r\n    # Get metadata from the first image\r\n    img_info = img.getInfo()\r\n    properties = img_info.get('properties', {})\r\n\r\n    # Extract 5 key metadata items relevant to scientific analysis\r\n    relevant_metadata = {\r\n        'CLOUD_COVER': properties.get('CLOUD_COVER', 'N/A'),\r\n        'SUN_AZIMUTH': properties.get('SUN_AZIMUTH', 'N/A'),\r\n        'SUN_ELEVATION': properties.get('SUN_ELEVATION', 'N/A'),\r\n        'EARTH_SUN_DISTANCE': properties.get('EARTH_SUN_DISTANCE', 'N/A'),\r\n        'SENSOR_ANGLE': properties.get('SENSOR_AZIMUTH', 'N/A')\r\n    }\r\n\r\n    # Create a Folium map centered on the AOI\r\n    map_center = [request.lat, request.lon]\r\n    m = folium.Map(location=map_center, zoom_start=10)\r\n\r\n    # Function to add Earth Engine image to folium map\r\n    def add_ee_layer(image, vis_params, name):\r\n        map_id_dict = ee.Image(image).getMapId(vis_params)\r\n        folium.TileLayer(\r\n            tiles=map_id_dict['tile_fetcher'].url_format,\r\n            attr='Google Earth Engine',\r\n            name=name,\r\n            overlay=True,\r\n            control=True\r\n        ).add_to(m)\r\n\r\n    # Experimenting with auto-scaling or setting reasonable min/max values\r\n    vis_params = {\r\n        'bands': ['B4', 'B3', 'B2'],  # RGB bands\r\n        'min': 0,  # Adjusted to minimum reflectance values\r\n        'max': 0.3,  # Adjusted for TOA reflectance images\r\n        'gamma': 1.4\r\n    }\r\n\r\n    # Add the Landsat image layer to the Folium map\r\n    add_ee_layer(img, vis_params, 'Landsat 8 RGB')\r\n\r\n    # Add the AOI to the map\r\n    folium.Marker(location=[request.lat, request.lon], popup='AOI', icon=folium.Icon(color='red')).add_to(m)\r\n\r\n    # Add relevant metadata as a popup on the map\r\n    metadata_html = \"<b>Landsat 8 Metadata (Scientific Analysis):</b><br>\"\r\n    for key, value in relevant_metadata.items():\r\n        metadata_html += f\"{key}: {value}<br>\"\r\n\r\n    metadata_popup = folium.Popup(html=metadata_html, max_width=300)\r\n    folium.Marker(location=map_center, popup=metadata_popup).add_to(m)\r\n\r\n    # Add base layers for context with attribution\r\n    folium.TileLayer(\r\n        tiles='Stamen Terrain',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Terrain',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    folium.TileLayer(\r\n        tiles='Stamen Toner',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Toner',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    # Add layer control\r\n    folium.LayerControl().add_to(m)\r\n\r\n    # Save the map as an HTML file\r\n    map_filename = \"map_with_metadata.html\"\r\n    m.save(map_filename)\r\n\r\n    # Return the HTML file\r\n    return FileResponse(map_filename, media_type='text/html')\r\n\r\n\r\n# Run the FastAPI app (use uvicorn in terminal to run the server)\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\r\n",
  "README.md": "# 🌍 Landsat Data API with FastAPI 🚀\n\nThis FastAPI application lets you interact with Google Earth Engine's Landsat data and provides endpoints for visualizing **scatter plots** and generating **maps** for a given area of interest (Mendoza, Argentina by default).\n\n## 🌟 Features\n\n- **Scatter Plot of Red vs. NIR bands** 📊\n- **Map Visualization of Landsat Images** 🗺️\n\n---\n\n## 🛠️ Installation & Setup\n\n### Prerequisites\n\n- Python 3.8+ 🐍\n- Google Earth Engine account 🌐 (and credentials setup)\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/cabustillo13/earth_engine_backend.git\ncd earth_engine_backend\n```\n\n### 2. Install Dependencies\n\nCreate a virtual environment and install the required dependencies from `requirements.txt`:\n\n```bash\npython -m venv my_env\nsource my_env/bin/activate  # On Windows: my_env\\Scripts\\activate\npip install -r requirements.txt\n```\n\n### 3. Authenticate with Google Earth Engine 🌐\n\nBefore you can use the API, you need to authenticate your Google Earth Engine account.\n\nRun the following command to authenticate:\n\n```bash\nearthengine authenticate\n```\n\nAlternatively, you can authenticate in Python:\n\n```python\nimport ee\nee.Authenticate()\n```\n\n### 4. Run the FastAPI Application 🚀\n\nStart the FastAPI server using `uvicorn`:\n\n```bash\nuvicorn main:app --reload\n```\n\nThis will start the application at `http://127.0.0.1:8000`.\n\n---\n\n## 🔥 Endpoints\n\n### 1. **Scatter Plot** 📊\n\nGenerates a scatter plot for Red vs. NIR bands from Landsat 8 data within the specified date range.\n\n- **URL**: `POST /generate-scatter-plot/`\n- **Response**: Number of images in the collection and a generated scatter plot.\n- It returns a `media_type='image/png'`\n\n### 2. **Map Visualization** 🗺️\n\nGenerates an interactive map of Landsat 8 images for the given Area of Interest (Mendoza, Argentina by default).\n\n- **URL**: `POST /generate-map/`\n- **Response**: Number of images in the collection and a generated map saved as `map.html`.\n- It returns a `media_type='text/html'`\n\n---\n\n## 🧪 Testing the API\n\n1. Ensure that the FastAPI server is running:\n   ```bash\n   uvicorn main:app --reload\n   ```\n\n   or\n\n  ```python\n   python main.py\n   ```\n\n3. Run the client script to make requests to the two endpoints:\n   ```bash\n   python test.py\n   ```\n\n---\n\n## 📂 Project Structure\n\n```bash\n├── main.py             # FastAPI application\n├── test.py             # Client script to test API\n├── requirements.txt    # Required dependencies\n└── README.md           # This file! 📄\n```\n\n---\n\n## 💡 Troubleshooting\n\n- If you get the error `Please authorize access to your Earth Engine account`, make sure you’ve authenticated your Earth Engine account.\n- Ensure that you’ve installed all the necessary libraries from `requirements.txt`.\n\n---\n\n## 🎉 Conclusion\n\nThis API makes it easy to access and visualize Landsat data for remote sensing and analysis. With just a couple of endpoints, you can fetch powerful satellite imagery data and visualize it easily!\n\nFeel free to contribute to the project or expand its functionality! Happy coding! 🚀\n\n---\n\n## 📞 Contact\n\nIf you have any issues, feel free to reach out via a GitHub issue or send me a message.\n",
  "requirements.txt": "annotated-types==0.7.0\nanyio==4.5.0\nbranca==0.8.0\ncachetools==5.5.0\ncertifi==2024.8.30\ncharset-normalizer==3.3.2\nclick==8.1.7\ncontourpy==1.1.1\ncycler==0.12.1\nearthengine-api==1.1.2\nexceptiongroup==1.2.2\nfastapi==0.115.0\nfolium==0.17.0\nfonttools==4.54.1\ngoogle-api-core==2.20.0\ngoogle-api-python-client==2.147.0\ngoogle-auth==2.35.0\ngoogle-auth-httplib2==0.2.0\ngoogle-cloud-core==2.4.1\ngoogle-cloud-storage==2.18.2\ngoogle-crc32c==1.5.0\ngoogle-resumable-media==2.7.2\ngoogleapis-common-protos==1.65.0\nh11==0.14.0\nhttplib2==0.22.0\nidna==3.10\nimportlib-resources==6.4.5\njinja2==3.1.4\nkiwisolver==1.4.7\nMarkupSafe==2.1.5\nmatplotlib==3.7.5\nnumpy==1.24.4\npackaging==24.1\npillow==10.4.0\nproto-plus==1.24.0\nprotobuf==5.28.2\npyasn1==0.6.1\npyasn1-modules==0.4.1\npydantic==2.9.2\npydantic-core==2.23.4\npyparsing==3.1.4\npython-dateutil==2.9.0.post0\nrequests==2.32.3\nrsa==4.9\nsix==1.16.0\nsniffio==1.3.1\nstarlette==0.38.6\ntyping-extensions==4.12.2\nuritemplate==4.1.1\nurllib3==2.2.3\nuvicorn==0.31.0\nxyzservices==2024.9.0\nzipp==3.20.2\npython-dotenv",
  "test.py": "import requests\r\n\r\n# URL of your FastAPI application\r\nBASE_URL = \"http://127.0.0.1:8000\"\r\n\r\ndef request_scatter_plot():\r\n    response = requests.get(f\"{BASE_URL}/scatter-plot\")\r\n    if response.status_code == 200:\r\n        print(\"Scatter Plot Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate scatter plot.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\ndef request_map():\r\n    response = requests.get(f\"{BASE_URL}/map\")\r\n    if response.status_code == 200:\r\n        print(\"Map Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate map.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\nif __name__ == \"__main__\":\r\n    request_scatter_plot()\r\n    request_map()\r\n"
}