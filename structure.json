{
  "main.py": "import ee\r\nimport folium\r\nimport matplotlib.pyplot as plt\r\nfrom fastapi import FastAPI\r\nfrom fastapi.responses import FileResponse\r\nfrom pydantic import BaseModel\r\nfrom typing import Optional\r\nimport os\r\n\r\n# Initialize the Earth Engine API\r\nee.Initialize(project='ee-mauriccaceres')\r\n\r\n# FastAPI app\r\napp = FastAPI()\r\n\r\n# Define a model for the area of interest and date range\r\nclass AoiRequest(BaseModel):\r\n    lat: float\r\n    lon: float\r\n    start_date: Optional[str] = '2024-01-01'\r\n    end_date: Optional[str] = '2025-12-30'\r\n\r\n\r\n# Endpoint 1: Generate scatter plot of Red vs NIR\r\n@app.post(\"/generate-scatter-plot/\")\r\nasync def generate_scatter_plot(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Define a function to sample Red and NIR bands from each image\r\n    def sample_image(image):\r\n        return image.select(['B4', 'B5']).sample(region=aoi, scale=30, numPixels=500)\r\n\r\n    # Map the sampling function over the collection\r\n    sampled_images = landsat_collection.map(sample_image)\r\n\r\n    # Flatten the sampled points into a single FeatureCollection\r\n    all_samples = sampled_images.flatten()\r\n\r\n    # Arrange the samples as a list of lists\r\n    samp_dict = all_samples.reduceColumns(ee.Reducer.toList().repeat(2), ['B4', 'B5'])\r\n    samp_list = ee.List(samp_dict.get('list'))\r\n\r\n    # Save server-side ee.List as a client-side Python list\r\n    samp_data = samp_list.getInfo()\r\n\r\n    # Generate the scatter plot using matplotlib\r\n    plt.scatter(samp_data[0], samp_data[1], alpha=0.2)\r\n    plt.xlabel('Red (B4)', fontsize=12)\r\n    plt.ylabel('NIR (B5)', fontsize=12)\r\n    plt.title('Red vs. NIR Scatter Plot for Landsat Images')\r\n\r\n    # Save the plot\r\n    plot_filename = 'scatter_plot.png'\r\n    plt.savefig(plot_filename)\r\n\r\n    # Return the image as a response\r\n    return FileResponse(plot_filename, media_type='image/png')\r\n\r\n\r\n# Endpoint 2: Generate and save a Folium map\r\n@app.post(\"/generate-map/\")\r\nasync def generate_map(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Get the first image in the collection for visualization\r\n    img = landsat_collection.first()\r\n\r\n    # Create a Folium map centered on the AOI\r\n    map_center = [request.lat, request.lon]\r\n    m = folium.Map(location=map_center, zoom_start=10)\r\n\r\n    # Function to add Earth Engine image to folium map\r\n    def add_ee_layer(image, vis_params, name):\r\n        map_id_dict = ee.Image(image).getMapId(vis_params)\r\n        folium.TileLayer(\r\n            tiles=map_id_dict['tile_fetcher'].url_format,\r\n            attr='Google Earth Engine',\r\n            name=name,\r\n            overlay=True,\r\n            control=True\r\n        ).add_to(m)\r\n\r\n    # Visualization parameters\r\n    vis_params = {\r\n        'bands': ['B4', 'B3', 'B2'],  # RGB\r\n        'min': 0,\r\n        'max': 3000,\r\n        'gamma': 1.4\r\n    }\r\n\r\n    # Add the Landsat image layer to the Folium map\r\n    add_ee_layer(img, vis_params, 'Landsat 8 RGB')\r\n\r\n    # Add the AOI to the map\r\n    folium.Marker(location=[request.lat, request.lon], popup='AOI', icon=folium.Icon(color='red')).add_to(m)\r\n\r\n    # Add base layers for context with attribution\r\n    folium.TileLayer(\r\n        tiles='Stamen Terrain',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Terrain',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    folium.TileLayer(\r\n        tiles='Stamen Toner',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Toner',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    # Add layer control\r\n    folium.LayerControl().add_to(m)\r\n\r\n    # Save the map as an HTML file\r\n    map_filename = \"map.html\"\r\n    m.save(map_filename)\r\n\r\n    # Return the HTML file\r\n    return FileResponse(map_filename, media_type='text/html')\r\n\r\n\r\n# Run the FastAPI app (use uvicorn in terminal to run the server)\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\r\n",
  "map.html": "<!DOCTYPE html>\n<html>\n<head>\n    \n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\n    \n        <script>\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        </script>\n    \n    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>\n    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>\n    <script src=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css\"/>\n    \n            <meta name=\"viewport\" content=\"width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n            <style>\n                #map_eb291c6c299bf3eddcd6b413aec829cc {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            </style>\n        \n</head>\n<body>\n    \n    \n            <div class=\"folium-map\" id=\"map_eb291c6c299bf3eddcd6b413aec829cc\" ></div>\n        \n</body>\n<script>\n    \n    \n            var map_eb291c6c299bf3eddcd6b413aec829cc = L.map(\n                \"map_eb291c6c299bf3eddcd6b413aec829cc\",\n                {\n                    center: [50.0, 60.0],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 10,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_b1d4c4049fc19cb73dfb283e6d17dffd = L.tileLayer(\n                \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                {\"attribution\": \"\\u0026copy; \\u003ca href=\\\"https://www.openstreetmap.org/copyright\\\"\\u003eOpenStreetMap\\u003c/a\\u003e contributors\", \"detectRetina\": false, \"maxNativeZoom\": 19, \"maxZoom\": 19, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_b1d4c4049fc19cb73dfb283e6d17dffd.addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n        \n    \n            var tile_layer_b46ac59138faa3d5d113acf94436809b = L.tileLayer(\n                \"https://earthengine.googleapis.com/v1/projects/ee-nasa-space-app-challenge/maps/17bdbb556f92f89946b0d7bf90636c16-949efaaedc176a12ea9c374428aa4119/tiles/{z}/{x}/{y}\",\n                {\"attribution\": \"Google Earth Engine\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_b46ac59138faa3d5d113acf94436809b.addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n        \n    \n            var marker_7e47750729ecdae1d77245961cb13adc = L.marker(\n                [50.0, 60.0],\n                {}\n            ).addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n        \n    \n            var icon_b1af2467f17eda996d77547c16a2f2a0 = L.AwesomeMarkers.icon(\n                {\"extraClasses\": \"fa-rotate-0\", \"icon\": \"info-sign\", \"iconColor\": \"white\", \"markerColor\": \"red\", \"prefix\": \"glyphicon\"}\n            );\n            marker_7e47750729ecdae1d77245961cb13adc.setIcon(icon_b1af2467f17eda996d77547c16a2f2a0);\n        \n    \n        var popup_8675039dfeee9c3f0b11bde545d1f279 = L.popup({\"maxWidth\": \"100%\"});\n\n        \n            \n                var html_ca017db1644f3b18f10ef4c5f94477cf = $(`<div id=\"html_ca017db1644f3b18f10ef4c5f94477cf\" style=\"width: 100.0%; height: 100.0%;\">AOI</div>`)[0];\n                popup_8675039dfeee9c3f0b11bde545d1f279.setContent(html_ca017db1644f3b18f10ef4c5f94477cf);\n            \n        \n\n        marker_7e47750729ecdae1d77245961cb13adc.bindPopup(popup_8675039dfeee9c3f0b11bde545d1f279)\n        ;\n\n        \n    \n    \n            var tile_layer_0f1607a38dbe78cf9b19899bf2d10507 = L.tileLayer(\n                \"Stamen Terrain\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_0f1607a38dbe78cf9b19899bf2d10507.addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n        \n    \n            var tile_layer_9b045b6858b6684f88d88c6fb8e251d0 = L.tileLayer(\n                \"Stamen Toner\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_9b045b6858b6684f88d88c6fb8e251d0.addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n        \n    \n            var layer_control_9640fb3fde586440a4f82d444fd3616f_layers = {\n                base_layers : {\n                    \"openstreetmap\" : tile_layer_b1d4c4049fc19cb73dfb283e6d17dffd,\n                    \"Stamen Terrain\" : tile_layer_0f1607a38dbe78cf9b19899bf2d10507,\n                    \"Stamen Toner\" : tile_layer_9b045b6858b6684f88d88c6fb8e251d0,\n                },\n                overlays :  {\n                    \"Landsat 8 RGB\" : tile_layer_b46ac59138faa3d5d113acf94436809b,\n                },\n            };\n            let layer_control_9640fb3fde586440a4f82d444fd3616f = L.control.layers(\n                layer_control_9640fb3fde586440a4f82d444fd3616f_layers.base_layers,\n                layer_control_9640fb3fde586440a4f82d444fd3616f_layers.overlays,\n                {\"autoZIndex\": true, \"collapsed\": true, \"position\": \"topright\"}\n            ).addTo(map_eb291c6c299bf3eddcd6b413aec829cc);\n\n        \n</script>\n</html>",
  "README.md": "# earth_engine_backend\nEarth Engine for satellite tracking\n",
  "requirements.txt": "annotated-types==0.7.0\nanyio==4.5.0\nbranca==0.8.0\ncachetools==5.5.0\ncertifi==2024.8.30\ncharset-normalizer==3.3.2\nclick==8.1.7\ncontourpy==1.1.1\ncycler==0.12.1\nearthengine-api==1.1.2\nexceptiongroup==1.2.2\nfastapi==0.115.0\nfolium==0.17.0\nfonttools==4.54.1\ngoogle-api-core==2.20.0\ngoogle-api-python-client==2.147.0\ngoogle-auth==2.35.0\ngoogle-auth-httplib2==0.2.0\ngoogle-cloud-core==2.4.1\ngoogle-cloud-storage==2.18.2\ngoogle-crc32c==1.5.0\ngoogle-resumable-media==2.7.2\ngoogleapis-common-protos==1.65.0\nh11==0.14.0\nhttplib2==0.22.0\nidna==3.10\nimportlib-resources==6.4.5\njinja2==3.1.4\nkiwisolver==1.4.7\nMarkupSafe==2.1.5\nmatplotlib==3.7.5\nnumpy==1.24.4\npackaging==24.1\npillow==10.4.0\nproto-plus==1.24.0\nprotobuf==5.28.2\npyasn1==0.6.1\npyasn1-modules==0.4.1\npydantic==2.9.2\npydantic-core==2.23.4\npyparsing==3.1.4\npython-dateutil==2.9.0.post0\nrequests==2.32.3\nrsa==4.9\nsix==1.16.0\nsniffio==1.3.1\nstarlette==0.38.6\ntyping-extensions==4.12.2\nuritemplate==4.1.1\nurllib3==2.2.3\nuvicorn==0.31.0\nxyzservices==2024.9.0\nzipp==3.20.2\n",
  "scatter_plot.png": "(binary)",
  "test.py": "import requests\r\n\r\n# URL of your FastAPI application\r\nBASE_URL = \"http://127.0.0.1:8000\"\r\n\r\ndef request_scatter_plot():\r\n    response = requests.get(f\"{BASE_URL}/scatter-plot\")\r\n    if response.status_code == 200:\r\n        print(\"Scatter Plot Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate scatter plot.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\ndef request_map():\r\n    response = requests.get(f\"{BASE_URL}/map\")\r\n    if response.status_code == 200:\r\n        print(\"Map Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate map.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\nif __name__ == \"__main__\":\r\n    request_scatter_plot()\r\n    request_map()\r\n"
}