{
  "main.py": "from fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\nimport folium\r\nfrom starlette.responses import FileResponse\r\nimport ee\r\nfrom dotenv import load_dotenv\r\nfrom typing import Optional\r\nimport matplotlib.pyplot as plt\r\nimport os\r\n\r\n\r\n# Load environment variables from the .env file\r\nload_dotenv()\r\n\r\n# Retrieve the Earth Engine project name from the environment variables\r\nee_project = os.getenv('EE_PROJECT')\r\n\r\n# Initialize Earth Engine with the project name\r\nee.Initialize(project=ee_project)\r\n\r\n# FastAPI app\r\napp = FastAPI()\r\n\r\n# Define a model for the area of interest and date range\r\nclass AoiRequest(BaseModel):\r\n    lat: float\r\n    lon: float\r\n    start_date: Optional[str] = '2024-01-01'\r\n    end_date: Optional[str] = '2025-12-30'\r\n\r\n\r\n# Endpoint 0: Root\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"Welcome to LESSAT 2024!\"}\r\n\r\n\r\n# Endpoint 1: Generate scatter plot of Red vs NIR\r\n@app.post(\"/generate-scatter-plot/\")\r\nasync def generate_scatter_plot(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Define a function to sample Red and NIR bands from each image\r\n    def sample_image(image):\r\n        return image.select(['B4', 'B5']).sample(region=aoi, scale=30, numPixels=500)\r\n\r\n    # Map the sampling function over the collection\r\n    sampled_images = landsat_collection.map(sample_image)\r\n\r\n    # Flatten the sampled points into a single FeatureCollection\r\n    all_samples = sampled_images.flatten()\r\n\r\n    # Arrange the samples as a list of lists\r\n    samp_dict = all_samples.reduceColumns(ee.Reducer.toList().repeat(2), ['B4', 'B5'])\r\n    samp_list = ee.List(samp_dict.get('list'))\r\n\r\n    # Save server-side ee.List as a client-side Python list\r\n    samp_data = samp_list.getInfo()\r\n\r\n    # Generate the scatter plot using matplotlib\r\n    plt.scatter(samp_data[0], samp_data[1], alpha=0.2)\r\n    plt.xlabel('Red (B4)', fontsize=12)\r\n    plt.ylabel('NIR (B5)', fontsize=12)\r\n    plt.title('Red vs. NIR Scatter Plot for Landsat Images')\r\n\r\n    # Save the plot\r\n    plot_filename = 'scatter_plot.png'\r\n    plt.savefig(plot_filename)\r\n\r\n    # Return the image as a response\r\n    return FileResponse(plot_filename, media_type='image/png')\r\n\r\n@app.post(\"/generate-map/\")\r\nasync def generate_map(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n\r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n\r\n    # Get the first image in the collection for visualization\r\n    img = landsat_collection.first()\r\n\r\n    # Get metadata from the first image\r\n    img_info = img.getInfo()\r\n    properties = img_info.get('properties', {})\r\n\r\n    # Extract 5 key metadata items relevant to scientific analysis\r\n    relevant_metadata = {\r\n        'CLOUD_COVER': properties.get('CLOUD_COVER', 'N/A'),\r\n        'SUN_AZIMUTH': properties.get('SUN_AZIMUTH', 'N/A'),\r\n        'SUN_ELEVATION': properties.get('SUN_ELEVATION', 'N/A'),\r\n        'EARTH_SUN_DISTANCE': properties.get('EARTH_SUN_DISTANCE', 'N/A'),\r\n        'SENSOR_ANGLE': properties.get('SENSOR_AZIMUTH', 'N/A')\r\n    }\r\n\r\n    # Create a Folium map centered on the AOI\r\n    map_center = [request.lat, request.lon]\r\n    m = folium.Map(location=map_center, zoom_start=10)\r\n\r\n    # Function to add Earth Engine image to folium map\r\n    def add_ee_layer(image, vis_params, name):\r\n        map_id_dict = ee.Image(image).getMapId(vis_params)\r\n        folium.TileLayer(\r\n            tiles=map_id_dict['tile_fetcher'].url_format,\r\n            attr='Google Earth Engine',\r\n            name=name,\r\n            overlay=True,\r\n            control=True\r\n        ).add_to(m)\r\n\r\n    # Experimenting with auto-scaling or setting reasonable min/max values\r\n    vis_params = {\r\n        'bands': ['B4', 'B3', 'B2'],  # RGB bands\r\n        'min': 0,  # Adjusted to minimum reflectance values\r\n        'max': 0.3,  # Adjusted for TOA reflectance images\r\n        'gamma': 1.4\r\n    }\r\n\r\n    # Add the Landsat image layer to the Folium map\r\n    add_ee_layer(img, vis_params, 'Landsat 8 RGB')\r\n\r\n    # Add the AOI to the map\r\n    folium.Marker(location=[request.lat, request.lon], popup='AOI', icon=folium.Icon(color='red')).add_to(m)\r\n\r\n    # Add relevant metadata as a popup on the map\r\n    metadata_html = \"<b>Landsat 8 Metadata (Scientific Analysis):</b><br>\"\r\n    for key, value in relevant_metadata.items():\r\n        metadata_html += f\"{key}: {value}<br>\"\r\n\r\n    metadata_popup = folium.Popup(html=metadata_html, max_width=300)\r\n    folium.Marker(location=map_center, popup=metadata_popup).add_to(m)\r\n\r\n    # Add base layers for context with attribution\r\n    folium.TileLayer(\r\n        tiles='Stamen Terrain',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Terrain',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    folium.TileLayer(\r\n        tiles='Stamen Toner',\r\n        attr='Map data © OpenStreetMap contributors, CC-BY-SA, Stamen Design',\r\n        name='Stamen Toner',\r\n        overlay=False,\r\n        control=True\r\n    ).add_to(m)\r\n\r\n    # Add layer control\r\n    folium.LayerControl().add_to(m)\r\n\r\n    # Save the map as an HTML file\r\n    map_filename = \"map_with_metadata.html\"\r\n    m.save(map_filename)\r\n\r\n    # Return the HTML file\r\n    return FileResponse(map_filename, media_type='text/html')\r\n\r\n\r\n\r\n# Landsat 8 Band Wavelengths (in micrometers)\r\nband_wavelengths = {\r\n    'B1': 0.44,  # Coastal/Aerosol\r\n    'B2': 0.48,  # Blue\r\n    'B3': 0.56,  # Green\r\n    'B4': 0.66,  # Red\r\n    'B5': 0.86,  # NIR\r\n    'B6': 1.6,   # SWIR1\r\n    'B7': 2.2,   # SWIR2\r\n}\r\n\r\n# Endpoint to generate Reflectance vs Wavelength plot\r\n@app.post(\"/generate-reflectance-plot/\")\r\nasync def generate_reflectance_plot(request: AoiRequest):\r\n    aoi = ee.Geometry.Point([request.lon, request.lat])\r\n    \r\n    # Fetch Landsat 8 TOA images and filter by date and region\r\n    landsat_collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_TOA') \\\r\n        .filterDate(request.start_date, request.end_date) \\\r\n        .filterBounds(aoi)\r\n    \r\n    # Get the first image in the collection\r\n    img = landsat_collection.first()\r\n\r\n    # Sample reflectance values at the AOI for each band\r\n    reflectance = img.sample(region=aoi, scale=30).first().toDictionary()\r\n\r\n    # Extract reflectance values for key bands (B1 to B7)\r\n    reflectance_values = [\r\n        reflectance.get(f'B{band}').getInfo() for band in range(1, 8)\r\n    ]\r\n\r\n    # Plot Reflectance vs Wavelength\r\n    wavelengths = list(band_wavelengths.values())\r\n    \r\n    plt.figure(figsize=(10, 6))\r\n    plt.plot(wavelengths, reflectance_values, marker='o', linestyle='-', color='b')\r\n    plt.xlabel('Wavelength (µm)', fontsize=12)\r\n    plt.ylabel('Reflectance', fontsize=12)\r\n    plt.title('Reflectance vs Wavelength for Landsat 8', fontsize=14)\r\n    plt.grid(True)\r\n    \r\n    # Save the plot\r\n    plot_filename = 'reflectance_vs_wavelength.png'\r\n    plt.savefig(plot_filename)\r\n    \r\n    # Return the plot as a response\r\n    return FileResponse(plot_filename, media_type='image/png')\r\n\r\n\r\n\r\n# Run the FastAPI app (use uvicorn in terminal to run the server)\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\r\n",
  "map_with_metadata.html": "<!DOCTYPE html>\n<html>\n<head>\n    \n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\n    \n        <script>\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        </script>\n    \n    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>\n    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>\n    <script src=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css\"/>\n    \n            <meta name=\"viewport\" content=\"width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n            <style>\n                #map_f7609837be4fa75e6d38b759ceb9c4db {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            </style>\n        \n</head>\n<body>\n    \n    \n            <div class=\"folium-map\" id=\"map_f7609837be4fa75e6d38b759ceb9c4db\" ></div>\n        \n</body>\n<script>\n    \n    \n            var map_f7609837be4fa75e6d38b759ceb9c4db = L.map(\n                \"map_f7609837be4fa75e6d38b759ceb9c4db\",\n                {\n                    center: [44.0, 0.0],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 10,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_99b2016e3054316061103f33ad41653e = L.tileLayer(\n                \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                {\"attribution\": \"\\u0026copy; \\u003ca href=\\\"https://www.openstreetmap.org/copyright\\\"\\u003eOpenStreetMap\\u003c/a\\u003e contributors\", \"detectRetina\": false, \"maxNativeZoom\": 19, \"maxZoom\": 19, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_99b2016e3054316061103f33ad41653e.addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n            var tile_layer_257dcd9c1a43d88a1e0a4ef77110462c = L.tileLayer(\n                \"https://earthengine.googleapis.com/v1/projects/ee-mauriccaceres/maps/7a21f6308566ee32030d7990b6032221-568ba730ee53ca8dd70ee8a276deba01/tiles/{z}/{x}/{y}\",\n                {\"attribution\": \"Google Earth Engine\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_257dcd9c1a43d88a1e0a4ef77110462c.addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n            var marker_b755c50bab92faea559bb8dde3596d99 = L.marker(\n                [44.0, 0.0],\n                {}\n            ).addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n            var icon_63cb736c6acb53c8cc8c5a4c7a10f040 = L.AwesomeMarkers.icon(\n                {\"extraClasses\": \"fa-rotate-0\", \"icon\": \"info-sign\", \"iconColor\": \"white\", \"markerColor\": \"red\", \"prefix\": \"glyphicon\"}\n            );\n            marker_b755c50bab92faea559bb8dde3596d99.setIcon(icon_63cb736c6acb53c8cc8c5a4c7a10f040);\n        \n    \n        var popup_38ca51e68104fb71b38543ed051fd2f3 = L.popup({\"maxWidth\": \"100%\"});\n\n        \n            \n                var html_edd6959fac408b1201e13b98f7aa496f = $(`<div id=\"html_edd6959fac408b1201e13b98f7aa496f\" style=\"width: 100.0%; height: 100.0%;\">AOI</div>`)[0];\n                popup_38ca51e68104fb71b38543ed051fd2f3.setContent(html_edd6959fac408b1201e13b98f7aa496f);\n            \n        \n\n        marker_b755c50bab92faea559bb8dde3596d99.bindPopup(popup_38ca51e68104fb71b38543ed051fd2f3)\n        ;\n\n        \n    \n    \n            var marker_b5427e097c27cbea5e064c97440d6396 = L.marker(\n                [44.0, 0.0],\n                {}\n            ).addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n        var popup_6175c1857e388eb84009401735cb8bff = L.popup({\"maxWidth\": 300});\n\n        \n            \n                var html_948cf176e34a8a204926cf200b413926 = $(`<div id=\"html_948cf176e34a8a204926cf200b413926\" style=\"width: 100.0%; height: 100.0%;\"><b>Landsat 8 Metadata (Scientific Analysis):</b><br>CLOUD_COVER: 83.11<br>SUN_AZIMUTH: 160.02741979<br>SUN_ELEVATION: 20.47395676<br>EARTH_SUN_DISTANCE: 0.983356<br>SENSOR_ANGLE: N/A<br></div>`)[0];\n                popup_6175c1857e388eb84009401735cb8bff.setContent(html_948cf176e34a8a204926cf200b413926);\n            \n        \n\n        marker_b5427e097c27cbea5e064c97440d6396.bindPopup(popup_6175c1857e388eb84009401735cb8bff)\n        ;\n\n        \n    \n    \n            var tile_layer_a2369f617bf300cd5cf22299f5d011d6 = L.tileLayer(\n                \"Stamen Terrain\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_a2369f617bf300cd5cf22299f5d011d6.addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n            var tile_layer_8fe8bfbf73c3ae037d326f75ced57d5e = L.tileLayer(\n                \"Stamen Toner\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_8fe8bfbf73c3ae037d326f75ced57d5e.addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n        \n    \n            var layer_control_89cf1993d2c94c5009dc5e8fd98892b9_layers = {\n                base_layers : {\n                    \"openstreetmap\" : tile_layer_99b2016e3054316061103f33ad41653e,\n                    \"Stamen Terrain\" : tile_layer_a2369f617bf300cd5cf22299f5d011d6,\n                    \"Stamen Toner\" : tile_layer_8fe8bfbf73c3ae037d326f75ced57d5e,\n                },\n                overlays :  {\n                    \"Landsat 8 RGB\" : tile_layer_257dcd9c1a43d88a1e0a4ef77110462c,\n                },\n            };\n            let layer_control_89cf1993d2c94c5009dc5e8fd98892b9 = L.control.layers(\n                layer_control_89cf1993d2c94c5009dc5e8fd98892b9_layers.base_layers,\n                layer_control_89cf1993d2c94c5009dc5e8fd98892b9_layers.overlays,\n                {\"autoZIndex\": true, \"collapsed\": true, \"position\": \"topright\"}\n            ).addTo(map_f7609837be4fa75e6d38b759ceb9c4db);\n\n        \n</script>\n</html>",
  "map.html": "<!DOCTYPE html>\n<html>\n<head>\n    \n    <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\n    \n        <script>\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        </script>\n    \n    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>\n    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>\n    <script src=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js\"></script>\n    <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css\"/>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css\"/>\n    \n            <meta name=\"viewport\" content=\"width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n            <style>\n                #map_0ac8ff5c863175b6498def4c91c2da3c {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            </style>\n        \n</head>\n<body>\n    \n    \n            <div class=\"folium-map\" id=\"map_0ac8ff5c863175b6498def4c91c2da3c\" ></div>\n        \n</body>\n<script>\n    \n    \n            var map_0ac8ff5c863175b6498def4c91c2da3c = L.map(\n                \"map_0ac8ff5c863175b6498def4c91c2da3c\",\n                {\n                    center: [25.0, 50.0],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 10,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_5b3dd5e43d35d33f3327b521b49115d6 = L.tileLayer(\n                \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                {\"attribution\": \"\\u0026copy; \\u003ca href=\\\"https://www.openstreetmap.org/copyright\\\"\\u003eOpenStreetMap\\u003c/a\\u003e contributors\", \"detectRetina\": false, \"maxNativeZoom\": 19, \"maxZoom\": 19, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_5b3dd5e43d35d33f3327b521b49115d6.addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n        \n    \n            var tile_layer_075a27ae8e93142dacf246483a03f81c = L.tileLayer(\n                \"https://earthengine.googleapis.com/v1/projects/ee-mauriccaceres/maps/16876e2370f8af5116075cda03da7943-6adda13f8f94882efcdd0075f60255b6/tiles/{z}/{x}/{y}\",\n                {\"attribution\": \"Google Earth Engine\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_075a27ae8e93142dacf246483a03f81c.addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n        \n    \n            var marker_cd055937a6f0b9bcc121aab5aa78f78a = L.marker(\n                [25.0, 50.0],\n                {}\n            ).addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n        \n    \n            var icon_c5bcedc2c240823497b6a7053d2fcf03 = L.AwesomeMarkers.icon(\n                {\"extraClasses\": \"fa-rotate-0\", \"icon\": \"info-sign\", \"iconColor\": \"white\", \"markerColor\": \"red\", \"prefix\": \"glyphicon\"}\n            );\n            marker_cd055937a6f0b9bcc121aab5aa78f78a.setIcon(icon_c5bcedc2c240823497b6a7053d2fcf03);\n        \n    \n        var popup_d84779617f01cd88420ad617e6fe7075 = L.popup({\"maxWidth\": \"100%\"});\n\n        \n            \n                var html_dd72d2c07c4ae24c122eca26380c64a4 = $(`<div id=\"html_dd72d2c07c4ae24c122eca26380c64a4\" style=\"width: 100.0%; height: 100.0%;\">AOI</div>`)[0];\n                popup_d84779617f01cd88420ad617e6fe7075.setContent(html_dd72d2c07c4ae24c122eca26380c64a4);\n            \n        \n\n        marker_cd055937a6f0b9bcc121aab5aa78f78a.bindPopup(popup_d84779617f01cd88420ad617e6fe7075)\n        ;\n\n        \n    \n    \n            var tile_layer_db0f0d46f48ff49c35bd584539066df9 = L.tileLayer(\n                \"Stamen Terrain\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_db0f0d46f48ff49c35bd584539066df9.addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n        \n    \n            var tile_layer_0868488cbc0fdcefade51306abb63ffc = L.tileLayer(\n                \"Stamen Toner\",\n                {\"attribution\": \"Map data \\u00a9 OpenStreetMap contributors, CC-BY-SA, Stamen Design\", \"detectRetina\": false, \"maxZoom\": 18, \"minZoom\": 0, \"noWrap\": false, \"opacity\": 1, \"subdomains\": \"abc\", \"tms\": false}\n            );\n        \n    \n            tile_layer_0868488cbc0fdcefade51306abb63ffc.addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n        \n    \n            var layer_control_ecbc96ed45da8e1867dde9d9dc571a84_layers = {\n                base_layers : {\n                    \"openstreetmap\" : tile_layer_5b3dd5e43d35d33f3327b521b49115d6,\n                    \"Stamen Terrain\" : tile_layer_db0f0d46f48ff49c35bd584539066df9,\n                    \"Stamen Toner\" : tile_layer_0868488cbc0fdcefade51306abb63ffc,\n                },\n                overlays :  {\n                    \"Landsat 8 RGB\" : tile_layer_075a27ae8e93142dacf246483a03f81c,\n                },\n            };\n            let layer_control_ecbc96ed45da8e1867dde9d9dc571a84 = L.control.layers(\n                layer_control_ecbc96ed45da8e1867dde9d9dc571a84_layers.base_layers,\n                layer_control_ecbc96ed45da8e1867dde9d9dc571a84_layers.overlays,\n                {\"autoZIndex\": true, \"collapsed\": true, \"position\": \"topright\"}\n            ).addTo(map_0ac8ff5c863175b6498def4c91c2da3c);\n\n        \n</script>\n</html>",
  "prompt.md": "",
  "reflectance_vs_wavelength.png": "(binary)",
  "requirements.txt": "annotated-types==0.7.0\nanyio==4.5.0\nbranca==0.8.0\ncachetools==5.5.0\ncertifi==2024.8.30\ncharset-normalizer==3.3.2\nclick==8.1.7\ncontourpy==1.1.1\ncycler==0.12.1\nearthengine-api==1.1.2\nexceptiongroup==1.2.2\nfastapi==0.115.0\nfolium==0.17.0\nfonttools==4.54.1\ngoogle-api-core==2.20.0\ngoogle-api-python-client==2.147.0\ngoogle-auth==2.35.0\ngoogle-auth-httplib2==0.2.0\ngoogle-cloud-core==2.4.1\ngoogle-cloud-storage==2.18.2\ngoogle-crc32c==1.5.0\ngoogle-resumable-media==2.7.2\ngoogleapis-common-protos==1.65.0\nh11==0.14.0\nhttplib2==0.22.0\nidna==3.10\nimportlib-resources==6.4.5\njinja2==3.1.4\nkiwisolver==1.4.7\nMarkupSafe==2.1.5\nmatplotlib==3.7.5\nnumpy==1.24.4\npackaging==24.1\npillow==10.4.0\nproto-plus==1.24.0\nprotobuf==5.28.2\npyasn1==0.6.1\npyasn1-modules==0.4.1\npydantic==2.9.2\npydantic-core==2.23.4\npyparsing==3.1.4\npython-dateutil==2.9.0.post0\nrequests==2.32.3\nrsa==4.9\nsix==1.16.0\nsniffio==1.3.1\nstarlette==0.38.6\ntyping-extensions==4.12.2\nuritemplate==4.1.1\nurllib3==2.2.3\nuvicorn==0.31.0\nxyzservices==2024.9.0\nzipp==3.20.2\npython-dotenv",
  "scatter_plot.png": "(binary)",
  "test.py": "import requests\r\n\r\n# URL of your FastAPI application\r\nBASE_URL = \"http://127.0.0.1:8000\"\r\n\r\ndef request_scatter_plot():\r\n    response = requests.get(f\"{BASE_URL}/scatter-plot\")\r\n    if response.status_code == 200:\r\n        print(\"Scatter Plot Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate scatter plot.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\ndef request_map():\r\n    response = requests.get(f\"{BASE_URL}/map\")\r\n    if response.status_code == 200:\r\n        print(\"Map Response:\")\r\n        print(response.json())\r\n    else:\r\n        print(\"Failed to generate map.\")\r\n        print(f\"Status Code: {response.status_code}, Response: {response.text}\")\r\n\r\nif __name__ == \"__main__\":\r\n    request_scatter_plot()\r\n    request_map()\r\n"
}